{"title":"NumPy 学习笔记：第一阶段 - 入门基础","uid":"ba03d7c748f55c669d509a2713c39e98","slug":"NumPy-学习笔记：第一阶段-入门基础","date":"2025-07-07T08:45:52.000Z","updated":"2025-07-07T09:19:42.298Z","comments":true,"path":"api/articles/NumPy-学习笔记：第一阶段-入门基础.json","keywords":null,"cover":null,"content":"<h2 id=\"NumPy-学习笔记：第一阶段-入门基础\"><a href=\"#NumPy-学习笔记：第一阶段-入门基础\" class=\"headerlink\" title=\"NumPy 学习笔记：第一阶段 - 入门基础\"></a>NumPy 学习笔记：第一阶段 - 入门基础</h2><h3 id=\"1-准备工作与基本概念\"><a href=\"#1-准备工作与基本概念\" class=\"headerlink\" title=\"1. 准备工作与基本概念\"></a><strong>1. 准备工作与基本概念</strong></h3><h4 id=\"1-1-NumPy-是什么？\"><a href=\"#1-1-NumPy-是什么？\" class=\"headerlink\" title=\"1.1 NumPy 是什么？\"></a><strong>1.1 NumPy 是什么？</strong></h4><p>NumPy（Numerical Python 的缩写）是 Python 语言的一个开源扩展程序库，支持大量的维度数组与矩阵运算，此外也针对数组运算提供大量的数学函数库。它是几乎所有 Python 数据科学和机器学习库（如 Pandas, SciPy, Matplotlib, Scikit-learn）的底层核心。</p>\n<h4 id=\"1-2-为什么选择-NumPy-而不是-Python-列表？\"><a href=\"#1-2-为什么选择-NumPy-而不是-Python-列表？\" class=\"headerlink\" title=\"1.2 为什么选择 NumPy 而不是 Python 列表？\"></a><strong>1.2 为什么选择 NumPy 而不是 Python 列表？</strong></h4><p>虽然 Python 内置的列表（List）可以存储数据，但在进行大规模数值计算时，NumPy 的 <code>ndarray</code> 对象具有压倒性的优势：</p>\n<ul>\n<li><strong>性能 (Performance):</strong> NumPy 数组在底层是使用 C 语言实现的，这使得其在处理数值运算时比纯 Python 代码快几个数量级。它避免了 Python 循环中的类型检查和其它开销，实现了所谓的“向量化”计算。</li>\n<li><strong>内存效率 (Memory Efficiency):</strong> 由于 NumPy 数组中的元素类型是固定的（<code>dtype</code>），它在内存中以紧凑、连续的方式存储数据，相比 Python 列表（需要为每个元素存储类型信息和引用），占用的内存要小得多。</li>\n<li><strong>便捷的数学运算 (Convenience):</strong> NumPy 提供了大量为数组设计的数学函数和操作。你可以对整个数组执行数学运算，而无需编写复杂的循环。例如，两个数组可以直接相加，这在 Python 列表中是无法直接做到的。</li>\n</ul>\n<h4 id=\"1-3-安装与导入\"><a href=\"#1-3-安装与导入\" class=\"headerlink\" title=\"1.3 安装与导入\"></a><strong>1.3 安装与导入</strong></h4><p>首先，确保已经安装了 NumPy。如果尚未安装，可以使用 pip 进行安装：</p>\n<pre class=\"line-numbers language-lang-bash\"><code class=\"language-lang-bash\">pip install numpy\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>在 Python 脚本或 Jupyter Notebook 中，我们通常使用 <code>np</code> 作为 NumPy 的标准别名来导入它，这是一种广泛遵循的社区惯例。</p>\n<pre class=\"line-numbers language-lang-python\"><code class=\"language-lang-python\">import numpy as np\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"2-NumPy-核心：ndarray-对象\"><a href=\"#2-NumPy-核心：ndarray-对象\" class=\"headerlink\" title=\"2. NumPy 核心：ndarray 对象\"></a><strong>2. NumPy 核心：<code>ndarray</code> 对象</strong></h3><p><code>ndarray</code>（N-dimensional array，N维数组）是 NumPy 的核心数据结构。它是一个多维的、包含相同类型元素的数组。</p>\n<p>让我们创建一个简单的数组，并查看它的核心属性：</p>\n<pre class=\"line-numbers language-lang-python\"><code class=\"language-lang-python\"># 创建一个 2x3 的二维数组 (2行3列)\narr = np.array([[1, 2, 3], [4, 5, 6]])\n\nprint(\"数组内容:\\n\", arr)\nprint(\"-\" * 20)\n\n# 1. ndim: 数组的维度（轴）数\nprint(f\"维度数 (ndim): {arr.ndim}\")\n\n# 2. shape: 数组的维度，返回一个元组\nprint(f\"形状 (shape): {arr.shape}\")\n\n# 3. size: 数组中元素的总数\nprint(f\"总元素数 (size): {arr.size}\")\n\n# 4. dtype: 数组中元素的数据类型\nprint(f\"数据类型 (dtype): {arr.dtype}\")\n\n# 5. itemsize: 每个元素的字节大小\nprint(f\"每个元素的字节大小 (itemsize): {arr.itemsize}\")\n\n# 6. data: 包含数组实际元素的内存缓冲区（通常我们不直接操作它）\nprint(f\"内存缓冲区地址 (data): {arr.data}\")\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>输出:</strong></p>\n<pre><code>数组内容:\n [[1 2 3]\n [4 5 6]]\n--------------------\n维度数 (ndim): 2\n形状 (shape): (2, 3)\n总元素数 (size): 6\n数据类型 (dtype): int64\n每个元素的字节大小 (itemsize): 8\n内存缓冲区地址 (data): &lt;memory at 0x000001F0BF600AD0&gt;\n</code></pre><h3 id=\"3-创建数组-Array-Creation\"><a href=\"#3-创建数组-Array-Creation\" class=\"headerlink\" title=\"3. 创建数组 (Array Creation)\"></a><strong>3. 创建数组 (Array Creation)</strong></h3><p>掌握创建数组的多种方法是使用 NumPy 的基础。</p>\n<h4 id=\"3-1-从-Python-列表或元组创建\"><a href=\"#3-1-从-Python-列表或元组创建\" class=\"headerlink\" title=\"3.1 从 Python 列表或元组创建\"></a><strong>3.1 从 Python 列表或元组创建</strong></h4><p><code>np.array()</code> 是最基础的创建方式。</p>\n<pre class=\"line-numbers language-lang-python\"><code class=\"language-lang-python\"># 从列表创建\nlist_data = [1, 2, 3.5, 4]\narr_from_list = np.array(list_data)\nprint(f\"从列表创建的数组: {arr_from_list}, 类型: {arr_from_list.dtype}\")\n\n# 从嵌套列表创建二维数组\nnested_list = [[1, 2], [3, 4]]\narr_2d = np.array(nested_list)\nprint(f\"创建的二维数组:\\n{arr_2d}\")\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>输出</strong>：</p>\n<pre><code>从列表创建的数组: [1.  2.  3.5 4. ], 类型: float64\n创建的二维数组:\n[[1 2]\n [3 4]]\n</code></pre><p><strong>注意:</strong> NumPy 会自动推断最合适的数据类型（在这个例子中是 <code>float64</code>，因为列表中有 <code>3.5</code>）。</p>\n<h4 id=\"3-2-使用内置函数创建特定数组\"><a href=\"#3-2-使用内置函数创建特定数组\" class=\"headerlink\" title=\"3.2 使用内置函数创建特定数组\"></a><strong>3.2 使用内置函数创建特定数组</strong></h4><p>这些函数非常适合用于创建已知形状和值的数组。</p>\n<pre class=\"line-numbers language-lang-python\"><code class=\"language-lang-python\"># 创建一个 3x4 的全零数组\nzeros_arr = np.zeros((3, 4))\nprint(f\"全零数组:\\n{zeros_arr}\\n\")\n\n# 创建一个 2x3 的全一数组，并指定数据类型为整数\nones_arr = np.ones((2, 3), dtype=np.int16)\nprint(f\"全一数组:\\n{ones_arr}\\n\")\n\n# 创建一个 2x2 的空数组（内容是未初始化的，取决于内存状态）\n# 注意：empty 并不安全，通常用于性能要求极高的场景\nempty_arr = np.empty((2, 2))\nprint(f\"空数组 (内容随机):\\n{empty_arr}\\n\")\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>输出：</strong></p>\n<pre><code>全零数组:\n[[0. 0. 0. 0.]\n [0. 0. 0. 0.]\n [0. 0. 0. 0.]]\n\n全一数组:\n[[1 1 1]\n [1 1 1]]\n\n空数组 (内容随机):\n[[1.  2. ]\n [3.5 4. ]]\n</code></pre><h4 id=\"3-3-创建序列数组\"><a href=\"#3-3-创建序列数组\" class=\"headerlink\" title=\"3.3 创建序列数组\"></a><strong>3.3 创建序列数组</strong></h4><pre class=\"line-numbers language-lang-python\"><code class=\"language-lang-python\"># np.arange(start, stop, step)\n# 创建一个从 0 到 9 的数组\nrange_arr = np.arange(10)\nprint(f\"arange(10): {range_arr}\\n\")\n\n# 创建一个从 2 到 10，步长为 2 的数组\nrange_step_arr = np.arange(2, 11, 2)\nprint(f\"arange(2, 11, 2): {range_step_arr}\\n\")\n\n# np.linspace(start, stop, num)\n# 在 0 和 1 之间创建 5 个等差的数\nlinspace_arr = np.linspace(0, 1, 5)\nprint(f\"linspace(0, 1, 5): {linspace_arr}\\n\")\n\n# np.logspace(start, stop, num)\n# 在 10^0 和 10^2 之间创建 3 个等比的数\nlogspace_arr = np.logspace(0, 2, 3) # 结果是 [10^0, 10^1, 10^2]\nprint(f\"logspace(0, 2, 3): {logspace_arr}\\n\")\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>输出：</strong></p>\n<pre><code>arange(10): [0 1 2 3 4 5 6 7 8 9]\n\narange(2, 11, 2): [ 2  4  6  8 10]\n\nlinspace(0, 1, 5): [0.   0.25 0.5  0.75 1.  ]\n\nlogspace(0, 2, 3): [  1.  10. 100.]\n</code></pre><h4 id=\"3-4-创建随机数组\"><a href=\"#3-4-创建随机数组\" class=\"headerlink\" title=\"3.4 创建随机数组\"></a><strong>3.4 创建随机数组</strong></h4><p><code>np.random</code> 模块非常实用。</p>\n<pre class=\"line-numbers language-lang-python\"><code class=\"language-lang-python\"># 创建一个 2x3 的数组，元素为 [0.0, 1.0) 之间的均匀分布随机数\nrand_arr = np.random.rand(2, 3)\nprint(f\"均匀分布随机数组:\\n{rand_arr}\\n\")\n\n# 创建一个 2x3 的数组，元素为符合标准正态分布（均值为0，方差为1）的随机数\nrandn_arr = np.random.randn(2, 3)\nprint(f\"标准正态分布随机数组:\\n{randn_arr}\\n\")\n\n# 创建一个 3x5 的数组，元素为 [1, 10) 之间的随机整数\nrandint_arr = np.random.randint(1, 10, size=(3, 5))\nprint(f\"随机整数数组:\\n{randint_arr}\\n\")\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>输出：</strong></p>\n<pre><code>均匀分布随机数组:\n[[0.01137494 0.45945179 0.96286648]\n [0.30871745 0.81260161 0.75919671]]\n\n标准正态分布随机数组:\n[[ 0.59965387 -0.45936121  2.07231621]\n [-0.032432   -1.19755955  0.08568854]]\n\n随机整数数组:\n[[5 6 4 7 4]\n [1 1 5 1 2]\n [8 3 4 4 7]]\n</code></pre><h3 id=\"4-基本索引与切片-Indexing-and-Slicing\"><a href=\"#4-基本索引与切片-Indexing-and-Slicing\" class=\"headerlink\" title=\"4. 基本索引与切片 (Indexing and Slicing)\"></a><strong>4. 基本索引与切片 (Indexing and Slicing)</strong></h3><p>这是 NumPy 操作中最高频的部分。</p>\n<h4 id=\"4-1-一维数组\"><a href=\"#4-1-一维数组\" class=\"headerlink\" title=\"4.1 一维数组\"></a><strong>4.1 一维数组</strong></h4><p>与 Python 列表非常相似。</p>\n<pre class=\"line-numbers language-lang-python\"><code class=\"language-lang-python\">arr1d = np.arange(10) # [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(f\"一维数组: {arr1d}\")\n\n# 获取索引为 2 的元素\nprint(f\"元素 arr1d[2]: {arr1d[2]}\")\n\n# 切片：获取索引从 2 到 4 的元素（不包括 5）\nprint(f\"切片 arr1d[2:5]: {arr1d[2:5]}\")\n\n# 修改切片内容\narr1d[2:5] = 100\nprint(f\"修改切片后: {arr1d}\")\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>输出：</strong></p>\n<pre><code>一维数组: [0 1 2 3 4 5 6 7 8 9]\n元素 arr1d[2]: 2\n切片 arr1d[2:5]: [2 3 4]\n修改切片后: [  0   1 100 100 100   5   6   7   8   9]\n</code></pre><h4 id=\"4-2-多维数组\"><a href=\"#4-2-多维数组\" class=\"headerlink\" title=\"4.2 多维数组\"></a><strong>4.2 多维数组</strong></h4><p>使用 <code>[row, col]</code> 的方式进行索引。</p>\n<pre class=\"line-numbers language-lang-python\"><code class=\"language-lang-python\">arr2d = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nprint(f\"二维数组:\\n{arr2d}\")\n\n# 获取第 1 行，第 2 列的元素（索引从0开始）\nelement = arr2d[1, 2]\nprint(f\"\\n元素 arr2d[1, 2]: {element}\") # 输出 6\n\n# 获取某一行（例如第 0 行）\nrow0 = arr2d[0] # 也可以写成 arr2d[0, :]\nprint(f\"第 0 行: {row0}\")\n\n# 获取某一列（例如第 1 列）\ncol1 = arr2d[:, 1]\nprint(f\"第 1 列: {col1}\")\n\n# 切片获取子数组（第 0, 1 行 和 第 1, 2 列交叉的区域）\nsub_arr = arr2d[:2, 1:]\nprint(f\"子数组 arr2d[:2, 1:]:\\n{sub_arr}\")\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>输出：</strong></p>\n<pre><code>二维数组:\n[[1 2 3]\n [4 5 6]\n [7 8 9]]\n\n元素 arr2d[1, 2]: 6\n第 0 行: [1 2 3]\n第 1 列: [2 5 8]\n子数组 arr2d[:2, 1:]:\n[[2 3]\n [5 6]]\n</code></pre><h4 id=\"4-3-重要概念：视图-View-vs-副本-Copy\"><a href=\"#4-3-重要概念：视图-View-vs-副本-Copy\" class=\"headerlink\" title=\"4.3 重要概念：视图 (View) vs 副本 (Copy)\"></a><strong>4.3 重要概念：视图 (View) vs 副本 (Copy)</strong></h4><p>这是 NumPy 的一个核心特性，也是初学者容易出错的地方。<strong>对数组的切片操作返回的是原始数组的“视图”，而不是一个全新的副本。</strong> 这意味着修改视图会直接影响到原始数组。这样做是为了性能和内存考虑。</p>\n<p><strong>示例：视图 (View)</strong></p>\n<pre class=\"line-numbers language-lang-python\"><code class=\"language-lang-python\"># 创建一个原始数组\noriginal_arr = np.arange(5)\nprint(f\"原始数组: {original_arr}\")\n\n# 创建一个切片（视图）\nslice_view = original_arr[2:4]\nprint(f\"切片视图: {slice_view}\")\n\n# 修改视图中的元素\nslice_view[0] = 999\nprint(f\"修改视图后，视图变为: {slice_view}\")\nprint(f\"原始数组也被修改了: {original_arr}\") # 注意看原始数组的变化\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>输出:</strong></p>\n<pre><code>原始数组: [0 1 2 3 4]\n切片视图: [2 3]\n修改视图后，视图变为: [999   3]\n原始数组也被修改了: [  0   1 999   3   4]\n</code></pre><p>如果你不希望修改原始数组，就需要显式地创建一个<strong>副本 (Copy)</strong>。</p>\n<p><strong>示例：副本 (Copy)</strong></p>\n<pre class=\"line-numbers language-lang-python\"><code class=\"language-lang-python\"># 创建一个原始数组\noriginal_arr_2 = np.arange(5)\nprint(f\"\\n原始数组 2: {original_arr_2}\")\n\n# 使用 .copy() 方法创建副本\narr_copy = original_arr_2[2:4].copy()\nprint(f\"切片副本: {arr_copy}\")\n\n# 修改副本中的元素\narr_copy[0] = 777\nprint(f\"修改副本后，副本变为: {arr_copy}\")\nprint(f\"原始数组 2 没有改变: {original_arr_2}\") # 原始数组安然无恙\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>输出:</strong></p>\n<pre><code>原始数组 2: [0 1 2 3 4]\n切片副本: [2 3]\n修改副本后，副本变为: [777   3]\n原始数组 2 没有改变: [0 1 2 3 4]\n</code></pre><p><strong>小结:</strong> 这个入门阶段可以打下坚实的基础。理解 <code>ndarray</code> 的属性、熟练创建各种数组、并掌握索引和切片的用法（特别是视图与副本的区别）是进行后续学习的关键。</p>\n","text":"这个阶段的目标是理解 NumPy 的核心概念，并掌握其最基本的操作...","permalink":"/post/NumPy-学习笔记：第一阶段-入门基础","photos":[],"count_time":{"symbolsCount":"5.8k","symbolsTime":"5 mins."},"categories":[{"name":"python语法学习","slug":"python语法学习","count":2,"path":"api/categories/python语法学习.json"}],"tags":[{"name":"python","slug":"python","count":2,"path":"api/tags/python.json"},{"name":"Numpy","slug":"Numpy","count":2,"path":"api/tags/Numpy.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#NumPy-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9A%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5-%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80\"><span class=\"toc-text\">NumPy 学习笔记：第一阶段 - 入门基础</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C%E4%B8%8E%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">1. 准备工作与基本概念</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-1-NumPy-%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F\"><span class=\"toc-text\">1.1 NumPy 是什么？</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-2-%E4%B8%BA%E4%BB%80%E4%B9%88%E9%80%89%E6%8B%A9-NumPy-%E8%80%8C%E4%B8%8D%E6%98%AF-Python-%E5%88%97%E8%A1%A8%EF%BC%9F\"><span class=\"toc-text\">1.2 为什么选择 NumPy 而不是 Python 列表？</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-3-%E5%AE%89%E8%A3%85%E4%B8%8E%E5%AF%BC%E5%85%A5\"><span class=\"toc-text\">1.3 安装与导入</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-NumPy-%E6%A0%B8%E5%BF%83%EF%BC%9Andarray-%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">2. NumPy 核心：ndarray 对象</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E5%88%9B%E5%BB%BA%E6%95%B0%E7%BB%84-Array-Creation\"><span class=\"toc-text\">3. 创建数组 (Array Creation)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-1-%E4%BB%8E-Python-%E5%88%97%E8%A1%A8%E6%88%96%E5%85%83%E7%BB%84%E5%88%9B%E5%BB%BA\"><span class=\"toc-text\">3.1 从 Python 列表或元组创建</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-2-%E4%BD%BF%E7%94%A8%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0%E5%88%9B%E5%BB%BA%E7%89%B9%E5%AE%9A%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">3.2 使用内置函数创建特定数组</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-3-%E5%88%9B%E5%BB%BA%E5%BA%8F%E5%88%97%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">3.3 创建序列数组</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-4-%E5%88%9B%E5%BB%BA%E9%9A%8F%E6%9C%BA%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">3.4 创建随机数组</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E5%9F%BA%E6%9C%AC%E7%B4%A2%E5%BC%95%E4%B8%8E%E5%88%87%E7%89%87-Indexing-and-Slicing\"><span class=\"toc-text\">4. 基本索引与切片 (Indexing and Slicing)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-1-%E4%B8%80%E7%BB%B4%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">4.1 一维数组</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-2-%E5%A4%9A%E7%BB%B4%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">4.2 多维数组</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-3-%E9%87%8D%E8%A6%81%E6%A6%82%E5%BF%B5%EF%BC%9A%E8%A7%86%E5%9B%BE-View-vs-%E5%89%AF%E6%9C%AC-Copy\"><span class=\"toc-text\">4.3 重要概念：视图 (View) vs 副本 (Copy)</span></a></li></ol></li></ol></li></ol>","author":{"name":"犬夜叉","slug":"blog-author","avatar":"https://i.imgur.com/CrgPA5H_d.png?maxwidth=520&shape=thumb&fidelity=high","link":"/","description":"一位喜欢犬夜叉的多模态大模型研究生","socials":{"github":"https://github.com/ziyi-wang2003","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_62954485?spm=1000.2115.3001.5343","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"NumPy 学习笔记：第二阶段 - 核心技能","uid":"b34a2d20ebaf2f1ab87598c5d48f72ca","slug":"NumPy-学习笔记：第二阶段-核心技能","date":"2025-07-07T09:23:26.000Z","updated":"2025-07-07T10:24:13.120Z","comments":true,"path":"api/articles/NumPy-学习笔记：第二阶段-核心技能.json","keywords":null,"cover":null,"text":"这个阶段的目标是掌握 NumPy 更高级的数组操作和核心功能，这是进行数据分析和科学计算的基础...","permalink":"/post/NumPy-学习笔记：第二阶段-核心技能","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[{"name":"python语法学习","slug":"python语法学习","count":2,"path":"api/categories/python语法学习.json"}],"tags":[{"name":"python","slug":"python","count":2,"path":"api/tags/python.json"},{"name":"Numpy","slug":"Numpy","count":2,"path":"api/tags/Numpy.json"}],"author":{"name":"犬夜叉","slug":"blog-author","avatar":"https://i.imgur.com/CrgPA5H_d.png?maxwidth=520&shape=thumb&fidelity=high","link":"/","description":"一位喜欢犬夜叉的多模态大模型研究生","socials":{"github":"https://github.com/ziyi-wang2003","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_62954485?spm=1000.2115.3001.5343","juejin":"","customs":{}}}},"next_post":{"title":"BLIP代码详解（一）","uid":"31d49180bc69c8b21b5ea22ba59ea29a","slug":"BLIP代码详解（一）","date":"2025-07-06T09:34:34.000Z","updated":"2025-07-07T06:29:00.013Z","comments":true,"path":"api/articles/BLIP代码详解（一）.json","keywords":null,"cover":null,"text":"详细讲解 models/blip.py 代码...","permalink":"/post/BLIP代码详解（一）","photos":[],"count_time":{"symbolsCount":"21k","symbolsTime":"19 mins."},"categories":[{"name":"代码详解","slug":"代码详解","count":1,"path":"api/categories/代码详解.json"}],"tags":[{"name":"BLIP","slug":"BLIP","count":2,"path":"api/tags/BLIP.json"},{"name":"代码详解","slug":"代码详解","count":1,"path":"api/tags/代码详解.json"}],"author":{"name":"犬夜叉","slug":"blog-author","avatar":"https://i.imgur.com/CrgPA5H_d.png?maxwidth=520&shape=thumb&fidelity=high","link":"/","description":"一位喜欢犬夜叉的多模态大模型研究生","socials":{"github":"https://github.com/ziyi-wang2003","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_62954485?spm=1000.2115.3001.5343","juejin":"","customs":{}}},"feature":false}}